Description: Application for Norcloud Demo

Parameters:
  CodeDeployBucket:
    Description: Bucket to upload Application for CodeDeploy
    Type: String

  MinClusterSize:
    Description: Minimum number of instances in the Cluster
    Type: String
    Default: 1

  MaxClusterSize:
    Description: Maximum number of instances in the Cluster
    Type: String
    Default: 2

  DesiredClusterSize:
    Description: Desired number of instances in the Cluster
    Type: String
    Default: 1

  KeyName:
    Description: EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  VPC:
    Description: VPC to launch stack in
    Type: AWS::EC2::VPC::Id

  PublicSubnets:
    Description: Public Subnets for Load Balancer and Bastion Host
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnets:
    Description: Private Subnets for Instances
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroups:
    Description: Security Group for Instances
    Type: List<AWS::EC2::SecurityGroup::Id>

  DatabaseHost:
    Description: Database Host for Application
    Type: String

  DatabaseDbName:
    Description: Database Host for Application
    Type: String

  DatabaseUser:
    Description: Database User for Application
    Type: String

  DatabasePassword:
    Description: Database Password for Application
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment"
        Parameters:
          - CodeDeployBucket
      - Label:
          default: "Deployment"
        Parameters:
          - AWS::StackName
      - Label:
          default: "Autoscaling Configuration"
        Parameters:
          - MinClusterSize
          - MaxClusterSize
          - DesiredClusterSize
      - Label:
          default: "SSH Configuration"
        Parameters:
          - KeyName
      - Label:
          default: "VPC Configuration"
        Parameters:
          - VPC
          - PublicSubnets
          - PrivateSubnets
          - SecurityGroups
      - Label:
          default: "Application Configuration"
        Parameters:
          - DatabaseHost
          - DatabaseDbName
          - DatabaseUser
          - DatabasePassword

Resources:
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeDeploy-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub CodeDeploy-${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "autoscaling:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "iam:PassRole"
                Resource:
                  - "*"

  CodeDeployEc2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Ec2-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub Ec2-${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref CodeDeployEc2Role

  BastionServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0b69ea66ff7391e80
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      SubnetId: !Select [0, !Ref PublicSubnets]
      SecurityGroupIds: !Ref SecurityGroups
      Tags:
        - Key: Name
          Value: !Sub bastion-${AWS::StackName}

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0b69ea66ff7391e80
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      SecurityGroups: !Ref SecurityGroups
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #! /bin/bash -v

            # Install base packages
            yum update -y
            yum install httpd -y
            amazon-linux-extras install php7.3 -y
            amazon-linux-extras enable php7.3
            yum install php-xml -y
            yum install php-mcrypt -y
            yum install ruby -y

            # Install CodeDeploy Agent
            wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            rm install

            # Enable mod_rewrite
            sed -i ':a;N;$!ba;s/AllowOverride None/AllowOverride All/2' /etc/httpd/conf/httpd.conf

            # Set Env Variables
            cat > /etc/httpd/conf.d/env.conf << 'EOF'
            SetEnv DB_HOST ${DatabaseHost}
            SetEnv DB_DBNAME ${DatabaseDbName}
            SetEnv DB_USER ${DatabaseUser}
            SetEnv DB_PASSWORD ${DatabasePassword}
            EOF

            cat > /etc/profile.d/load_env.sh << 'EOF'
            export DB_HOST=${DatabaseHost}
            export DB_DBNAME ${DatabaseDbName}
            export DB_USER=${DatabaseUser}
            export DB_PASSWORD=${DatabasePassword}
            EOF

            # Restart Services
            service httpd start
            service php-fpm restart

            # Create HealthCheck file for TargetGroup
            echo 'OK' > /var/www/html/hc.html

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref AWS::StackName
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckProtocol: HTTP
      HealthCheckPath: /hc.html
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: stickiness.enabled
          Value: true

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      Cooldown: 10
      MaxSize: !Ref MaxClusterSize
      MinSize: !Ref MinClusterSize
      DesiredCapacity: !Ref DesiredClusterSize
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${AWS::StackName}

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: "1"
      ScalingAdjustment: "1"

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: "1"
      ScalingAdjustment: "-1"

  CpuAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "80"
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: "60"
      AlarmActions:
        - Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CpuAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: "1"
      Statistic: Average
      Threshold: "40"
      AlarmDescription: Alarm if CPU too low
      Period: "60"
      AlarmActions:
        - Ref: ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      Subnets: !Ref PublicSubnets
      SecurityGroups: !Ref SecurityGroups
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  LoadBalancerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  DeploymentApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref AWS::StackName
      ComputePlatform: Server

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: !Ref AWS::StackName
      ApplicationName: !Ref DeploymentApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt TargetGroup.TargetGroupName
      AutoScalingGroups:
        - !Ref AutoScalingGroup
      Deployment:
        Description: "First Launch Deployment"
        IgnoreApplicationStopFailures: true
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Ref CodeDeployBucket
            BundleType: "zip"
            Key: "app-latest.zip"
Outputs:
  Endpoint:
    Description: Endpoint Url
    Value: !Join ["", ["http://", !GetAtt ApplicationLoadBalancer.DNSName]]
